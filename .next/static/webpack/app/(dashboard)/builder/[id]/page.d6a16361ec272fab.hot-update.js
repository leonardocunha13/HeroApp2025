"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(dashboard)/builder/[id]/page",{

/***/ "(app-pages-browser)/./actions/form.tsx":
/*!**************************!*\
  !*** ./actions/form.tsx ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CreateForm: () => (/* binding */ CreateForm),\n/* harmony export */   GetClientWithProjects: () => (/* binding */ GetClientWithProjects),\n/* harmony export */   GetClients: () => (/* binding */ GetClients),\n/* harmony export */   GetEquipmentTagsForForm: () => (/* binding */ GetEquipmentTagsForForm),\n/* harmony export */   GetFormById: () => (/* binding */ GetFormById),\n/* harmony export */   GetFormContentByUrl: () => (/* binding */ GetFormContentByUrl),\n/* harmony export */   GetFormStats: () => (/* binding */ GetFormStats),\n/* harmony export */   GetFormWithSubmissionDetails: () => (/* binding */ GetFormWithSubmissionDetails),\n/* harmony export */   GetFormWithSubmissions: () => (/* binding */ GetFormWithSubmissions),\n/* harmony export */   GetForms: () => (/* binding */ GetForms),\n/* harmony export */   GetFormsByClientName: () => (/* binding */ GetFormsByClientName),\n/* harmony export */   GetFormsInformation: () => (/* binding */ GetFormsInformation),\n/* harmony export */   GetFormsWithClient: () => (/* binding */ GetFormsWithClient),\n/* harmony export */   GetProjects: () => (/* binding */ GetProjects),\n/* harmony export */   GetProjectsFromClientName: () => (/* binding */ GetProjectsFromClientName),\n/* harmony export */   GetSubmissionWithTagInfo: () => (/* binding */ GetSubmissionWithTagInfo),\n/* harmony export */   PublishForm: () => (/* binding */ PublishForm),\n/* harmony export */   SaveFormAfterTest: () => (/* binding */ SaveFormAfterTest),\n/* harmony export */   SubmitForm: () => (/* binding */ SubmitForm),\n/* harmony export */   UpdateFormContent: () => (/* binding */ UpdateFormContent),\n/* harmony export */   getContentByFormIDandTagID: () => (/* binding */ getContentByFormIDandTagID),\n/* harmony export */   getEquipmentTagID: () => (/* binding */ getEquipmentTagID),\n/* harmony export */   publishFormAction: () => (/* binding */ publishFormAction),\n/* harmony export */   runForm: () => (/* binding */ runForm),\n/* harmony export */   saveFormAction: () => (/* binding */ saveFormAction),\n/* harmony export */   submitFormAction: () => (/* binding */ submitFormAction)\n/* harmony export */ });\n/* harmony import */ var private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! private-next-rsc-action-client-wrapper */ \"(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js\");\n/* harmony import */ var private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_action_entry_do_not_use__ {\"00369e8ec83ab1bd2124fd1278f96da57fcc983b0d\":\"GetClients\",\"0056b66f5e0bfda60da83a467cac83458903790355\":\"GetProjects\",\"005890e9ace11382590dfe256d18a985d80ef53664\":\"GetFormStats\",\"00a91fed0e98ab3125c1c8169ace482bdb26cc0548\":\"GetFormsInformation\",\"00ad1843f1c28ec580071c5c56699400132f7f9d12\":\"GetForms\",\"400e3e5833031e9d07aca6f53303ca77d0d2e18145\":\"publishFormAction\",\"401ebe00f05c551128eb9d6c75ea1bdbba798b238a\":\"saveFormAction\",\"40226b3b5d44a7254f49759d036f24d7c23272d040\":\"GetFormById\",\"403145f8835472f5e7741c1a435bba5cc897cb941f\":\"GetFormContentByUrl\",\"403b90fa7a3d9fa11b4a930b74a54039aa3ad1cd8d\":\"GetEquipmentTagsForForm\",\"404a8fb6c649d11bc0a07b97e817ba79e1e78b43fb\":\"GetFormsWithClient\",\"405c6f446a3b1abb852dc49ff1980b1db3e3f83630\":\"submitFormAction\",\"4068ecb9b942a6b5fed7a58d307434a4cd226cc865\":\"GetProjectsFromClientName\",\"40b077053238d0a2659c40cea672092d6d0cf1893c\":\"GetFormWithSubmissionDetails\",\"40c066748347b8b677aeb8f39299abc748f5c0f25e\":\"GetSubmissionWithTagInfo\",\"40d850fd14e1b9f97007830d74533abd1b2b998c5a\":\"GetFormWithSubmissions\",\"40ed1a63a644cfd2d361fd292636b2fb466efe82b6\":\"GetFormsByClientName\",\"40ffc290e11218328d68e3f5866f1a8fb2cb77cddc\":\"GetClientWithProjects\",\"6066c4603ae30a49e16a5a29faa271602a4f375e0c\":\"getEquipmentTagID\",\"60922447ba3f326fdf23eac6584943278d55d45d32\":\"getContentByFormIDandTagID\",\"60cb494246e13d01c97932a238a3d4622a74f55852\":\"UpdateFormContent\",\"702a21f6cf4717559298ad70c1798c88ee23f93130\":\"SubmitForm\",\"7035ce3c6c8f8889bce5f235aaf672a24636cf064a\":\"CreateForm\",\"70512de972c6c1b3fffa11e6c3274976b337deee8b\":\"PublishForm\",\"70670f5b317aefa057bffee35f3ac0d5a67af0e014\":\"SaveFormAfterTest\",\"7f3d15c2293b367b25bd6fde2116c045b5dca5b542\":\"runForm\"} */ \nvar GetClients = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"00369e8ec83ab1bd2124fd1278f96da57fcc983b0d\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"GetClients\");\nvar GetProjects = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"0056b66f5e0bfda60da83a467cac83458903790355\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"GetProjects\");\nvar GetFormStats = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"005890e9ace11382590dfe256d18a985d80ef53664\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"GetFormStats\");\nvar GetForms = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"00ad1843f1c28ec580071c5c56699400132f7f9d12\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"GetForms\");\nvar GetFormById = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40226b3b5d44a7254f49759d036f24d7c23272d040\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"GetFormById\");\nvar UpdateFormContent = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"60cb494246e13d01c97932a238a3d4622a74f55852\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"UpdateFormContent\");\nvar saveFormAction = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"401ebe00f05c551128eb9d6c75ea1bdbba798b238a\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"saveFormAction\");\nvar PublishForm = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"70512de972c6c1b3fffa11e6c3274976b337deee8b\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"PublishForm\");\nvar publishFormAction = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"400e3e5833031e9d07aca6f53303ca77d0d2e18145\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"publishFormAction\");\nvar GetFormContentByUrl = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"403145f8835472f5e7741c1a435bba5cc897cb941f\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"GetFormContentByUrl\");\nvar SubmitForm = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"702a21f6cf4717559298ad70c1798c88ee23f93130\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"SubmitForm\");\nvar submitFormAction = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"405c6f446a3b1abb852dc49ff1980b1db3e3f83630\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"submitFormAction\");\nvar GetFormWithSubmissions = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40d850fd14e1b9f97007830d74533abd1b2b998c5a\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"GetFormWithSubmissions\");\nvar GetSubmissionWithTagInfo = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40c066748347b8b677aeb8f39299abc748f5c0f25e\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"GetSubmissionWithTagInfo\");\nvar GetFormWithSubmissionDetails = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40b077053238d0a2659c40cea672092d6d0cf1893c\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"GetFormWithSubmissionDetails\");\nvar GetEquipmentTagsForForm = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"403b90fa7a3d9fa11b4a930b74a54039aa3ad1cd8d\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"GetEquipmentTagsForForm\");\nvar GetClientWithProjects = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40ffc290e11218328d68e3f5866f1a8fb2cb77cddc\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"GetClientWithProjects\");\nvar GetFormsWithClient = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"404a8fb6c649d11bc0a07b97e817ba79e1e78b43fb\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"GetFormsWithClient\");\nvar GetFormsInformation = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"00a91fed0e98ab3125c1c8169ace482bdb26cc0548\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"GetFormsInformation\");\nvar GetProjectsFromClientName = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"4068ecb9b942a6b5fed7a58d307434a4cd226cc865\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"GetProjectsFromClientName\");\nvar CreateForm = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"7035ce3c6c8f8889bce5f235aaf672a24636cf064a\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"CreateForm\");\nvar runForm = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"7f3d15c2293b367b25bd6fde2116c045b5dca5b542\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"runForm\");\nvar GetFormsByClientName = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40ed1a63a644cfd2d361fd292636b2fb466efe82b6\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"GetFormsByClientName\");\nvar SaveFormAfterTest = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"70670f5b317aefa057bffee35f3ac0d5a67af0e014\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"SaveFormAfterTest\");\nvar getContentByFormIDandTagID = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"60922447ba3f326fdf23eac6584943278d55d45d32\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getContentByFormIDandTagID\");\nvar getEquipmentTagID = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"6066c4603ae30a49e16a5a29faa271602a4f375e0c\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getEquipmentTagID\");\n /*getEquipmentTagID(\"Equip1\", \"Tag1\")\r\n.then((updatedForm) => {\r\n  console.log(\"Equip TAG ID:\", updatedForm);\r\n})\r\n.catch((error) => {\r\n  console.error(\"Error updating form:\", error);\r\n});*/ \n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./actions/form.tsx\n"));

/***/ })

});